"""Test core.recover_state.recover_rng on V8 & SpiderMonkey"""

from core.recover_state import recover_rng


def test_spider_monkey() -> None:
    """Test core.recover_state.recover_rng on SpiderMonkey"""
    rng = next(
        iter(
            recover_rng(
                [
                    0.61229849166999,
                    0.2748852035143442,
                    0.6382170315106748,
                    0.15068035615953257,
                    0.02421778299339472,
                    0.44734816809264555,
                    0.9473443301232497,
                    0.9572517538335437,
                    0.7295507849139502,
                    0.555652320735116,
                    0.1408323961540503,
                    0.04248385524514042,
                    0.19546984683201618,
                    0.7556186127036021,
                    0.6395649129236787,
                    0.2228853511600548,
                    0.1988074798144931,
                    0.06713235132816064,
                    0.8518441031757767,
                    0.620522867358898,
                    0.5345627587346843,
                    0.7556440481399304,
                    0.7965068916565037,
                    0.7521139552787076,
                    0.8594150871551756,
                    0.25530965344242584,
                    0.6304864153144492,
                    0.7815324947916046,
                    0.5677981750393468,
                    0.03623275487025768,
                    0.15538423745929453,
                    0.49395692547989556,
                    0.8635444923238631,
                    0.3200552988500902,
                    0.6903805949576609,
                    0.8288621151407632,
                    0.8272322233027996,
                    0.3676328230235453,
                    0.4030217715564576,
                    0.20892503870798496,
                    0.5953202343240757,
                    0.12672644707550895,
                    0.4442818194940461,
                    0.8100109343943297,
                    0.46169908663979453,
                    0.38140223074075164,
                    0.5104467547352863,
                    0.3077233355054907,
                    0.06130185296619606,
                    0.19408098268631024,
                    0.29493350725105993,
                    0.3795250125842524,
                    0.5201449292248418,
                    0.5849289931336942,
                    0.981104749308999,
                    0.3650970589040542,
                    0.4976631941891272,
                    0.015016549792877365,
                    0.9671163279899532,
                    0.009256760936883102,
                    0.26336792902361517,
                    0.45539152898022384,
                    0.014569692265736678,
                    0.5036011471659029,
                    0.047420734219937644,
                    0.6771319065669824,
                    0.6426945593238409,
                    0.0925177474404727,
                    0.6645851599837219,
                    0.17374618015374232,
                    0.23968223874855887,
                    0.9540903254214207,
                    0.07083128810389117,
                    0.3545813059602658,
                    0.6441529870175143,
                    0.836973747820959,
                    0.04732308894591042,
                    0.5582461514621933,
                    0.7939352120579279,
                    0.13610255582646935,
                    0.5610187025615714,
                    0.4295305522235322,
                    0.8611560536093326,
                    0.7384518357559722,
                    0.29390759472991,
                    0.9702765956555567,
                    0.14304002920633407,
                    0.16526490575483332,
                    0.26789077487958624,
                    0.6090162441255571,
                    0.14658705856104148,
                    0.06894914206897174,
                    0.2902318108896863,
                    0.9764840694837071,
                    0.7581703615406636,
                    0.6010472083456572,
                    0.8725600986106127,
                    0.5995830656460664,
                    0.3511220746653294,
                    0.19420210425744477,
                    0.2689363303438581,
                    0.2843773121655955,
                    0.5642785593874386,
                    0.3565049412564041,
                    0.4270327621250847,
                    0.9865542383751271,
                    0.11434776222515342,
                    0.3487872984458933,
                    0.8960858387823384,
                    0.4920639606476297,
                    0.7632122841443315,
                    0.06313951805181195,
                    0.5014366354720035,
                    0.7879380771598102,
                    0.6099992972972684,
                    0.422454578006599,
                    0.799041203274683,
                    0.52232347782084,
                    0.24145324539644275,
                    0.8154640673071419,
                    0.4481212392399718,
                    0.993163841498502,
                    0.14046856186854306,
                    0.41680208291722154,
                    0.548777585174809,
                    0.9706106375625704,
                    0.45426237729541774,
                    0.7066633168297167,
                ],
                False,
            )
        )
    )
    assert tuple(rng.state) == (
        6903695920777496199,
        13053615485774502503,
    )
    assert tuple(rng.math_random() for _ in range(5)) == (
        0.26209951237927365,
        0.49425963101369974,
        0.16184697161455297,
        0.37234041996701617,
        0.005940538835638387,
    )


def test_v8() -> None:
    """Test core.recover_state.recover_rng on V8"""
    rng = next(
        iter(
            recover_rng(
                [
                    0.8190275579518744,
                    0.7732907389069505,
                    0.3871390182869947,
                    0.4731200784224112,
                    0.6421172313351433,
                    0.6149802506271898,
                    0.4517289747783322,
                    0.46398849415048704,
                    0.31498507678349785,
                    0.9086948403947099,
                    0.28880452454483607,
                    0.18368560741052287,
                    0.40969587025930987,
                    0.4971235062194992,
                    0.9702892227914821,
                    0.42572080151133074,
                    0.1069507077218308,
                    0.3015806948120132,
                    0.29208768744696845,
                    0.511354389182505,
                    0.31074637530248617,
                    0.46895512445209264,
                    0.4190450146687752,
                    0.2735758224787386,
                    0.2443401905522542,
                    0.4346513858789145,
                    0.8833585623281519,
                    0.1995637111545301,
                    0.10196182652556085,
                    0.22728622850952918,
                    0.23762191686841727,
                    0.34168151836609995,
                    0.8099574618787533,
                    0.3374670512373421,
                    0.5038824201389958,
                    0.9251990589618706,
                    0.3054903904321702,
                    0.08664604498238915,
                    0.6225682233825627,
                    0.08002109695150739,
                    0.15608724062976176,
                    0.9577439756389632,
                    0.9091753039469945,
                    0.4498746910757192,
                    0.01628930854814037,
                    0.4166503090688589,
                    0.2362724929089166,
                    0.7626812742000944,
                    0.715538696079447,
                    0.0817920420722078,
                    0.642233613741868,
                    0.6004554225038772,
                    0.5880162321668347,
                    0.6497846438560935,
                    0.15750969597664577,
                    0.0185685804070308,
                    0.11844983080080618,
                    0.3058226503639685,
                    0.7790374269062139,
                    0.7563816646705113,
                    0.7578978262778362,
                    0.082429181198171,
                    0.5738530484811735,
                    0.9196486978840399,
                ],
                True,
            )
        )
    )
    assert tuple(rng.state) == (
        15367715639775231848,
        3062868714974736748,
    )
    assert tuple(rng.math_random() for _ in range(5)) == (
        0.25411811123887307,
        0.7607532034800737,
        0.7229581153348121,
        0.014330443213833366,
        0.6816115476079143,
    )
